// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// We created our models below

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  // we add @uniqe to make email unique*/
  email String? @unique
  emailVerified DateTime?
  image String?
  //hashedPassword will be used for credential authentification
  // we set it as optional because password will not be required when we want to use the social login ( google and github)
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

//Here we create our relation
  // A user can have maany accounts
  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

// create our models. 

// the Account relation model will be used for our social login so we need to have exact fields
model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  // relation with User
  // This line creates a relation with the user using the userId field and references the User model id field above.
  // So we are going to store the User model id inside our useId field in Account model
  // onDelete is an instruction of what happens when a user is deleted 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

// we need a unique combination of the two
  @@unique([provider, providerAccountId ])

}

//listing model
model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  // we are goig to aim this at cloudinary cdn later
  imageSrc String
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue String
  userId String @db.ObjectId
  price Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

//reservation model
model Reservation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}